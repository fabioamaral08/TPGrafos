/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * View.java
 *
 * Created on 09/05/2012, 14:57:16
 */
package Grafos.desenho;

import Grafos.AGM;
import Grafos.BuscaLargura;
import Grafos.Coloracao;
import Grafos.ComponentesConexas;
import Grafos.Conectividade;
import Grafos.Grafo;
import Grafos.ListaAdjacencia;
import Grafos.Representacao;
import Grafos.Topologia;
import Grafos.Transposta;
import Grafos.desenho.color.GrayScale;
import Grafos.desenho.color.RainbowScale;
import Maze.Lab;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Danilo Medeiros Eler
 */
public class View extends javax.swing.JFrame {

    /**
     * Creates new form View
     */
    public View() {
        this.view = new ViewPanel();
        //this.view.setGraph(this.graph);
        initComponents();
    }

    private Graph geraGraph(Representacao rep, int[] ant) {

        int numvert = rep.getNumVertices();
        Graph g = new Graph(numvert, 0);
        for (int i = 0; i < numvert; i++) {
            if (ant[i] != -1) {
                Vertex v1 = g.getVertex().get(i);
                Vertex v2 = g.getVertex().get(ant[i]);

                g.addEdge(new Edge(v1, v2, rep.getVal(i, ant[i]), false));
            }
        }

        return g;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane(this.view);
        p_thePanel = new javax.swing.JPanel();
        p_Vazio = new javax.swing.JPanel();
        p_buscaLargura = new javax.swing.JPanel();
        buttonBusca = new javax.swing.JButton();
        textFieldBusca = new javax.swing.JTextField();
        labelBusca = new javax.swing.JLabel();
        p_maze = new javax.swing.JPanel();
        lb_entradaMaze = new javax.swing.JLabel();
        lb_saidaMaze = new javax.swing.JLabel();
        lb_xEntradaMaze = new javax.swing.JLabel();
        lb_yEntradaMaze = new javax.swing.JLabel();
        tf_xEntradaMaze = new javax.swing.JTextField();
        tf_yEntradaMaze = new javax.swing.JTextField();
        lb_xSaidaMaze = new javax.swing.JLabel();
        tf_xSaidaMaze = new javax.swing.JTextField();
        lb_ySaidaMaze = new javax.swing.JLabel();
        tf_ySaidaMaze = new javax.swing.JTextField();
        bt_goMaze = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        opcoes_Menu = new javax.swing.JMenu();
        carregarGrafo_Menu = new javax.swing.JMenuItem();
        salvarImagem_Menu = new javax.swing.JMenuItem();
        algoritmos_Menu = new javax.swing.JMenu();
        buttonCC = new javax.swing.JMenuItem();
        buttonCor = new javax.swing.JMenuItem();
        buttonAGM = new javax.swing.JMenuItem();
        buttonCM = new javax.swing.JMenuItem();
        buttonC = new javax.swing.JMenuItem();
        buttonT = new javax.swing.JMenuItem();
        buttonOT = new javax.swing.JMenuItem();
        buttonBL = new javax.swing.JMenuItem();
        aplic_Menu = new javax.swing.JMenu();
        mostraLab = new javax.swing.JMenuItem();
        geraLab = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        p_thePanel.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout p_VazioLayout = new javax.swing.GroupLayout(p_Vazio);
        p_Vazio.setLayout(p_VazioLayout);
        p_VazioLayout.setHorizontalGroup(
            p_VazioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 698, Short.MAX_VALUE)
        );
        p_VazioLayout.setVerticalGroup(
            p_VazioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 131, Short.MAX_VALUE)
        );

        p_thePanel.add(p_Vazio, "cardVazio");
        p_Vazio.getAccessibleContext().setAccessibleName("");

        p_buscaLargura.setBorder(javax.swing.BorderFactory.createTitledBorder("Busca em Largura"));

        buttonBusca.setText("Buscar");
        buttonBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBuscaActionPerformed(evt);
            }
        });

        labelBusca.setText("Vértice Inicial:");

        javax.swing.GroupLayout p_buscaLarguraLayout = new javax.swing.GroupLayout(p_buscaLargura);
        p_buscaLargura.setLayout(p_buscaLarguraLayout);
        p_buscaLarguraLayout.setHorizontalGroup(
            p_buscaLarguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_buscaLarguraLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(labelBusca)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 349, Short.MAX_VALUE)
                .addComponent(buttonBusca)
                .addGap(60, 60, 60))
        );
        p_buscaLarguraLayout.setVerticalGroup(
            p_buscaLarguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_buscaLarguraLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(p_buscaLarguraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelBusca))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        p_thePanel.add(p_buscaLargura, "cardBusca");

        lb_entradaMaze.setText("Entrada:");

        lb_saidaMaze.setText("Saída:");

        lb_xEntradaMaze.setText("X");

        lb_yEntradaMaze.setText("Y");

        lb_xSaidaMaze.setText("X");

        lb_ySaidaMaze.setText("Y");

        bt_goMaze.setText("GO!!");
        bt_goMaze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_goMazeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout p_mazeLayout = new javax.swing.GroupLayout(p_maze);
        p_maze.setLayout(p_mazeLayout);
        p_mazeLayout.setHorizontalGroup(
            p_mazeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_mazeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(p_mazeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(p_mazeLayout.createSequentialGroup()
                        .addGroup(p_mazeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lb_entradaMaze)
                            .addGroup(p_mazeLayout.createSequentialGroup()
                                .addComponent(lb_xEntradaMaze, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tf_xEntradaMaze, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lb_yEntradaMaze, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_yEntradaMaze, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lb_saidaMaze)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_mazeLayout.createSequentialGroup()
                        .addComponent(lb_xSaidaMaze)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_xSaidaMaze, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lb_ySaidaMaze)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tf_ySaidaMaze, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 481, Short.MAX_VALUE)
                .addComponent(bt_goMaze)
                .addGap(56, 56, 56))
        );
        p_mazeLayout.setVerticalGroup(
            p_mazeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_mazeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lb_entradaMaze)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(p_mazeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_xEntradaMaze, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_yEntradaMaze, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_xEntradaMaze)
                    .addComponent(lb_yEntradaMaze))
                .addGap(18, 18, 18)
                .addGroup(p_mazeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_saidaMaze)
                    .addComponent(bt_goMaze))
                .addGap(4, 4, 4)
                .addGroup(p_mazeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_xSaidaMaze)
                    .addComponent(tf_xSaidaMaze, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_ySaidaMaze)
                    .addComponent(tf_ySaidaMaze, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        p_thePanel.add(p_maze, "cardMaze");

        opcoes_Menu.setText("Opções");

        carregarGrafo_Menu.setText("Carregar Grafo");
        carregarGrafo_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carregarGrafo_MenuActionPerformed(evt);
            }
        });
        opcoes_Menu.add(carregarGrafo_Menu);

        salvarImagem_Menu.setText("Salvar Imagem");
        salvarImagem_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarImagem_MenuActionPerformed(evt);
            }
        });
        opcoes_Menu.add(salvarImagem_Menu);

        jMenuBar1.add(opcoes_Menu);

        algoritmos_Menu.setText("Algoritmos");

        buttonCC.setText("Marcar Componentes Conexas");
        buttonCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCCActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(buttonCC);

        buttonCor.setText("Coloração");
        buttonCor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCorActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(buttonCor);

        buttonAGM.setText("Árvore Geradora Mínima");
        buttonAGM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAGMActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(buttonAGM);

        buttonCM.setText("Caminho Mínimo");
        buttonCM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCMActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(buttonCM);

        buttonC.setText("Conectividade");
        buttonC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(buttonC);

        buttonT.setText("Transposição");
        buttonT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(buttonT);

        buttonOT.setText("Ordem Topológica");
        buttonOT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOTActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(buttonOT);

        buttonBL.setText("Busca em Largura");
        buttonBL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBLActionPerformed(evt);
            }
        });
        algoritmos_Menu.add(buttonBL);

        jMenuBar1.add(algoritmos_Menu);

        aplic_Menu.setText("Aplicação");
        aplic_Menu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aplic_MenuMouseClicked(evt);
            }
        });
        aplic_Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplic_MenuActionPerformed(evt);
            }
        });

        mostraLab.setText("Labirinto");
        mostraLab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostraLabActionPerformed(evt);
            }
        });
        aplic_Menu.add(mostraLab);

        geraLab.setText("Gerar Labirinto");
        geraLab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geraLabActionPerformed(evt);
            }
        });
        aplic_Menu.add(geraLab);

        jMenuBar1.add(aplic_Menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(p_thePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(p_thePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void carregarGrafo_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carregarGrafo_MenuActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser("C:\\Users\\fabio\\Desktop\\Aulas\\Grafos\\arq");
        int result;
        result = fc.showOpenDialog(null);
        if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
            String filename = fc.getSelectedFile().getAbsolutePath();
            BufferedReader in = null;
            try {
                in = new BufferedReader(new FileReader(filename));
                ////////LEMBRAR DE VERIFICAR SE É GRAFO OU DÍGRAFO
                ////////FAZER O TRATAMENTO NA INSERÇÃO DOS DADOS NA ESTRUTURA
                int grafo = Integer.parseInt(in.readLine());

                

                //le numero de vertices
                int nVert = Integer.parseInt(in.readLine());
                this.graph = new Graph(nVert, grafo); ///desenho
                this.grafo = new Grafo(nVert, grafo, new ListaAdjacencia()); ///estrutura de dados

                //leitura das arestas
                String line;
                while ((line = in.readLine()) != null && line.trim().length() > 0) {
                    StringTokenizer t1 = new StringTokenizer(line, " ");
                    int vIni = Integer.parseInt(t1.nextToken().trim()); //verticeInicial
                    int vFim = Integer.parseInt(t1.nextToken().trim()); //verticeFinal
                    int peso = Integer.parseInt(t1.nextToken().trim()); //Peso
                    Vertex vS = this.graph.getVertex().get(vIni);
                    Vertex vT = this.graph.getVertex().get(vFim);
                    this.grafo.addAresta(vIni, vFim, peso); //estrutura de dados
                    Edge e = new Edge(vS, vT, peso, this.graph.isOriented()); //desenho

                    this.graph.addEdge(e);    //desenho

                }  //se tiver peso nas arestas, adicionar mais uma leitura de token

                this.view.setGraph(graph);

                this.backUpGraph = this.graph.clone();
                
                if (grafo == 0) {
                    this.buttonCC.setEnabled(true);
                    this.buttonCor.setEnabled(true);
                    this.buttonAGM.setEnabled(true);
                    this.buttonC.setEnabled(false);
                    this.buttonT.setEnabled(false);
                    this.buttonOT.setEnabled(false);
                } else {
                    this.buttonCC.setEnabled(false);
                    this.buttonCor.setEnabled(false);
                    this.buttonAGM.setEnabled(false);
                    this.buttonC.setEnabled(true);
                    this.buttonT.setEnabled(true);

                    Conectividade conec = new Conectividade();

                    conec.execute(this.grafo);

                    if (conec.getNumComp() == nVert) {
                        this.buttonOT.setEnabled(true);
                    } else {
                        this.buttonOT.setEnabled(false);
                    }

                }

            } catch (IOException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                //fechar o arquivo
                if (in != null) {
                    try {
                        in.close();
                    } catch (IOException ex) {
                        Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_carregarGrafo_MenuActionPerformed

    private void salvarImagem_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarImagem_MenuActionPerformed
        // TODO add your handling code here:
        JFileChooser dialog = new JFileChooser();
        dialog.setMultiSelectionEnabled(false);
        dialog.setDialogTitle("Save file");
        dialog.setCurrentDirectory(new File("D:\\DANILO\\UNESP\\2017\\Aulas\\Grafos"));
        int result = dialog.showDialog(this, "Salvar");
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                String filename = dialog.getSelectedFile().getAbsolutePath();
                this.view.saveToPngImageFile(filename);
            } catch (IOException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_salvarImagem_MenuActionPerformed

    private void buttonCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCCActionPerformed
        CardLayout card = (CardLayout) p_thePanel.getLayout();
        card.show(p_thePanel, "cardVazio");

        graph = this.backUpGraph.clone();
        ComponentesConexas componentesConexas = new ComponentesConexas();
        componentesConexas.execute(grafo);
        int comp[] = componentesConexas.getComponentes();
        int numComp = componentesConexas.getNumComponentes();
        int compStep = 255 / numComp;
        RainbowScale rbS = new RainbowScale();
        for (int i = 0; i < comp.length; i++) {
            System.out.println("Vertice: " + i + " Compoente: " + comp[i]);
            this.graph.getVertex().get(i).setColor(rbS.getColor(comp[i] * compStep));
        }
        this.view.cleanImage();
        this.view.repaint();
    }//GEN-LAST:event_buttonCCActionPerformed

    private void buttonCorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCorActionPerformed
        CardLayout card = (CardLayout) p_thePanel.getLayout();
        card.show(p_thePanel, "cardVazio");

        graph = this.backUpGraph.clone();

        Coloracao coloracao = new Coloracao();
        coloracao.execute(grafo);
        int cores[] = coloracao.getCores();
        int nCores = coloracao.getNumCores();

        int coresStep = 255 / nCores;
        RainbowScale rbS = new RainbowScale();
        //GrayScale gs = new GrayScale();
        for (int i = 0; i < cores.length; i++) {
            System.out.println("Vertice: " + i + " Cor: " + cores[i]);
            this.graph.getVertex().get(i).setColor(rbS.getColor(cores[i] * coresStep));
            //this.graph.getVertex().get(i).setColor(gs.getColor(cores[i] * coresStep));
        }
        this.view.cleanImage();
        this.view.repaint();
    }//GEN-LAST:event_buttonCorActionPerformed

    private void buttonAGMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAGMActionPerformed
        p_buscaLargura.setBorder(BorderFactory.createTitledBorder("Árvore Geradora Mínima"));

        graph = this.backUpGraph;
        this.view.cleanImage();
        this.view.repaint();

        CardLayout card = (CardLayout) p_thePanel.getLayout();
        card.show(p_thePanel, "cardBusca");

        /*
        Enfiado
        
        AGM a = new AGM();
        int vert;
        try {
            String opc = this.textFieldBusca.getText();
            vert = Integer.valueOf(opc);
            graph = geraGraph(grafo.getRepresentacao(), a.execute(grafo, vert));

        } catch (Exception e) {
            return;
        } finally {

            this.view.cleanImage();
            this.view.repaint();
        }
         */

    }//GEN-LAST:event_buttonAGMActionPerformed

    private void buttonCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCActionPerformed
        CardLayout card = (CardLayout) p_thePanel.getLayout();
        card.show(p_thePanel, "cardVazio");

        graph = this.backUpGraph.clone();
        Conectividade componentesConexas = new Conectividade();
        componentesConexas.execute(grafo);
        int comp[] = componentesConexas.getComponente();
        int numComp = componentesConexas.getNumComp();
        int compStep = 255 / numComp;
        RainbowScale rbS = new RainbowScale();
        for (int i = 0; i < comp.length; i++) {
            System.out.println("Vertice: " + i + " Compoente: " + comp[i]);
            this.graph.getVertex().get(i).setColor(rbS.getColor(comp[i] * compStep));
        }
        this.view.cleanImage();
        this.view.repaint();

    }//GEN-LAST:event_buttonCActionPerformed

    private void buttonBLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBLActionPerformed
        p_buscaLargura.setBorder(BorderFactory.createTitledBorder("Busca em Largura"));

        CardLayout card = (CardLayout) p_thePanel.getLayout();
        card.show(p_thePanel, "cardBusca");

    }//GEN-LAST:event_buttonBLActionPerformed

    private void buttonOTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOTActionPerformed
        CardLayout card = (CardLayout) p_thePanel.getLayout();
        card.show(p_thePanel, "cardVazio");

        this.topologia = true;

        Topologia topsort = new Topologia();
        topsort.execute(grafo);
        this.graph = new Graph(topsort.getOrdem(), (ArrayList<Edge>) this.graph.getEdges().clone());

        this.view.cleanImage();
        this.view.repaint();


    }//GEN-LAST:event_buttonOTActionPerformed

    private void buttonTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTActionPerformed
        CardLayout card = (CardLayout) p_thePanel.getLayout();
        card.show(p_thePanel, "cardVazio");

        Transposta transp = new Transposta();

        transp.execute(grafo);

        this.graph = new Graph(transp.getTransposto());
        this.view.cleanImage();
        this.view.repaint();
    }//GEN-LAST:event_buttonTActionPerformed

    private void buttonCMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCMActionPerformed
        CardLayout card = (CardLayout) p_thePanel.getLayout();
        card.show(p_thePanel, "cardVazio");
    }//GEN-LAST:event_buttonCMActionPerformed

    private void buttonBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBuscaActionPerformed

        int ini;
        this.graph = this.backUpGraph.clone();
        BuscaLargura busca = new BuscaLargura();
        try {
            ini = Integer.valueOf(this.textFieldBusca.getText());
            if (ini < 0 || ini >= this.grafo.getRepresentacao().getNumVertices()) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Numero Inválido");
            return;
        }
        busca.execute(grafo, ini);

        int[] caminho = busca.getCaminho();

        this.graph.buscaLargura(caminho);

        this.view.setGraph(this.graph);
        this.view.cleanImage();

        this.view.repaint();


    }//GEN-LAST:event_buttonBuscaActionPerformed

    private void aplic_MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplic_MenuActionPerformed

    }//GEN-LAST:event_aplic_MenuActionPerformed

    private void aplic_MenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aplic_MenuMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_aplic_MenuMouseClicked

    private void mostraLabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostraLabActionPerformed
        CardLayout card = (CardLayout) p_thePanel.getLayout();
        card.show(p_thePanel, "cardMaze");

        this.col = Integer.valueOf(JOptionPane.showInputDialog(this, "Numero de colunas do labirinto:"));
        this.graph.computeMazePosition(col);

        this.view.setGraph(this.graph);
        this.view.cleanImage();

        this.view.repaint();        this.view.repaint();    }//GEN-LAST:event_mostraLabActionPerformed

    private void bt_goMazeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_goMazeActionPerformed
        int xi, yi, xf, yf;
        graph = this.backUpGraph.clone();

        graph.setApp(true);
        try {
            xi = Integer.valueOf(this.tf_xEntradaMaze.getText());
            yi = Integer.valueOf(this.tf_yEntradaMaze.getText());

            xf = Integer.valueOf(this.tf_xSaidaMaze.getText());
            yf = Integer.valueOf(this.tf_ySaidaMaze.getText());

            if (xi * col + yi > this.grafo.getRepresentacao().getNumVertices() || xf * col + yf > this.grafo.getRepresentacao().getNumVertices() || xi < 0 || yi < 0 || xf < 0 || yf < 0 || yi >= col || yf >= col) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Coordenadas Inválidas");
            return;
        }

        BuscaLargura busca = new BuscaLargura();
        int vi = (xi * col) + yi;
        int vf = (xf * col) + yf;
        busca.execute(grafo, vi);

        graph.caminho(busca.getCaminho(), vi, vf);

        this.view.setGraph(this.graph);
        this.view.cleanImage();

        this.view.repaint();
    }//GEN-LAST:event_bt_goMazeActionPerformed

    private void geraLabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geraLabActionPerformed
        Lab maze;

        try {
            int lin = Integer.valueOf(JOptionPane.showInputDialog("Numero de linhas:"));
            int col = Integer.valueOf(JOptionPane.showInputDialog("Numero de colunas:"));

            maze = new Lab(lin, col);

            maze.gravaArq();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Numero Inválido");
        }
    }//GEN-LAST:event_geraLabActionPerformed

    public class ViewPanel extends JPanel {

        public ViewPanel() {
            this.setBackground(java.awt.Color.WHITE);
            this.setLayout(new FlowLayout(FlowLayout.LEFT));
        }

        @Override
        public void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);

            java.awt.Graphics2D g2 = (java.awt.Graphics2D) g;
            ////configuração do rendering para obeter melhor qualidade
            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);

            if (graph != null && this.imageBuffer == null) {
                this.imageBuffer = new BufferedImage(graph.getSize().width + 1,
                        graph.getSize().height + 1, BufferedImage.TYPE_INT_RGB);

                java.awt.Graphics2D g2Buffer = this.imageBuffer.createGraphics();
                g2Buffer.setColor(this.getBackground());
                g2Buffer.fillRect(0, 0, graph.getSize().width + 1, graph.getSize().height + 1);

                g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                if (topologia) {
                    graph.drawTopo(g2Buffer);
                    topologia = false;
                } else {
                    graph.draw(g2Buffer);
                }
                g2Buffer.dispose();
            }

            if (this.imageBuffer != null) {
                g2.drawImage(this.imageBuffer, 0, 0, null);
            }
        }

        public void saveToPngImageFile(String filename) throws IOException {
            try {
                //this.paint(this.imageBuffer.getGraphics());
                ImageIO.write(this.imageBuffer, "png", new File(filename));
            } catch (IOException ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            }
        }

        public void setGraph(Graph graph) {
            if (graph != null) {
                this.setPreferredSize(new Dimension(graph.getSize().width * 2,
                        graph.getSize().height * 2));
                this.setSize(new Dimension(graph.getSize().width * 2,
                        graph.getSize().height * 2));

                this.cleanImage();
                this.repaint();
            }
        }

        public Vertex getMarkedVertex() {
            return markedVertex;
        }

        public void cleanImage() {
            this.imageBuffer = null;
        }

        public void adjustPanel() {
            float iniX = graph.getVertex().get(0).getX();
            float iniY = graph.getVertex().get(0).getY();
            float max_x = iniX, max_y = iniX;
            float min_x = iniY, min_y = iniY;
            int zero = graph.getVertex().get(0).getRay() * 5 + 10;

            for (int i = 1; i < graph.getVertex().size(); i++) {
                float x = graph.getVertex().get(i).getX();
                if (max_x < x) {
                    max_x = x;
                } else if (min_x > x) {
                    min_x = x;
                }

                float y = graph.getVertex().get(i).getY();
                if (max_y < y) {
                    max_y = y;
                } else if (min_y > y) {
                    min_y = y;
                }
            }

            for (Vertex v : graph.getVertex()) {
                v.setX(v.getX() + zero - min_x);
                v.setY(v.getY() + zero - min_y);
            }

            Dimension d = this.getSize();
            d.width = (int) max_x + zero;
            d.height = (int) max_y + zero;
            this.setSize(d);
            this.setPreferredSize(d);
        }

        public void markVertices(ArrayList<Vertex> vertices) {
            if (vertices != null) {
                this.cleanMarkedVertices(false);

                //change the vertices' colors
                for (Vertex v : vertices) {
                    v.setSelected(true);
                }

                this.cleanImage();
                this.repaint();
            }
        }

        public void cleanMarkedVertices(boolean cleanVertex) {
            if (graph != null) {
                this.markedVertex = null;

                for (Vertex vertex : graph.getVertex()) {
                    vertex.setSelected(false);

                }
            }

            this.cleanImage();
            this.repaint();
        }

        @Override
        public void setFont(java.awt.Font font) {
            //
        }

        @Override
        public java.awt.Font getFont() {
            return null;// colocar alguma fonte
        }

        @Override
        public void setBackground(Color bg) {
            super.setBackground(bg);

        }
        private java.awt.Color color = java.awt.Color.RED;
        //Used to color based on a document
        private Vertex markedVertex;
        //Used to move the points
        private Vertex selectedVertex;
        //contain the selected vertices which will be moved
        private ArrayList<Vertex> selectedVertices;
        //The image which will be drawn as a graph
        private BufferedImage imageBuffer;
    }
    private ViewPanel view;
    private Graph graph;
    private Grafo grafo;
    private Graph backUpGraph;
    private Grafo backUpGrafo;
    private boolean topologia = false;
    private int col;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu algoritmos_Menu;
    private javax.swing.JMenu aplic_Menu;
    private javax.swing.JButton bt_goMaze;
    private javax.swing.JMenuItem buttonAGM;
    private javax.swing.JMenuItem buttonBL;
    private javax.swing.JButton buttonBusca;
    private javax.swing.JMenuItem buttonC;
    private javax.swing.JMenuItem buttonCC;
    private javax.swing.JMenuItem buttonCM;
    private javax.swing.JMenuItem buttonCor;
    private javax.swing.JMenuItem buttonOT;
    private javax.swing.JMenuItem buttonT;
    private javax.swing.JMenuItem carregarGrafo_Menu;
    private javax.swing.JMenuItem geraLab;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelBusca;
    private javax.swing.JLabel lb_entradaMaze;
    private javax.swing.JLabel lb_saidaMaze;
    private javax.swing.JLabel lb_xEntradaMaze;
    private javax.swing.JLabel lb_xSaidaMaze;
    private javax.swing.JLabel lb_yEntradaMaze;
    private javax.swing.JLabel lb_ySaidaMaze;
    private javax.swing.JMenuItem mostraLab;
    private javax.swing.JMenu opcoes_Menu;
    private javax.swing.JPanel p_Vazio;
    private javax.swing.JPanel p_buscaLargura;
    private javax.swing.JPanel p_maze;
    private javax.swing.JPanel p_thePanel;
    private javax.swing.JMenuItem salvarImagem_Menu;
    private javax.swing.JTextField textFieldBusca;
    private javax.swing.JTextField tf_xEntradaMaze;
    private javax.swing.JTextField tf_xSaidaMaze;
    private javax.swing.JTextField tf_yEntradaMaze;
    private javax.swing.JTextField tf_ySaidaMaze;
    // End of variables declaration//GEN-END:variables
}
